name: Python Error Fixer

on:
  push:
    branches: [ dev ]
    paths:
      - '**.py'  # Only trigger on Python file changes
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'  # Only trigger on Python file changes
  workflow_dispatch:  # Allow manual triggering

jobs:
  fix-python:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        audience: sts.amazonaws.com
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # Enable pip caching
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 botocore
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Check commit message
      id: check_commit
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"Auto-fix"* ]] || [[ "$COMMIT_MSG" == *"auto-fix"* ]] || [[ "$COMMIT_MSG" == *"[skip-build]"* ]]; then
          echo "Skipping build for auto-fix or skip-build commit"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Fix Python errors
      if: steps.check_commit.outputs.skip != 'true'
      id: fix_errors
      run: |
        # Create a directory to store diffs
        mkdir -p /tmp/diffs
        
        FIXED_FILES=()
        CHANGES_DESCRIPTION=""
        
        for file in $(find . -type f -name "*.py" ! -name "fix_python_errors.py"); do
          if [[ "$file" == *"/venv/"* ]] || [[ "$file" == *"/.venv/"* ]] || [[ "$file" == *"/__pycache__/"* ]]; then
            echo "Skipping $file (excluded directory)"
            continue
          fi
          
          echo "Processing $file"
          
          # Store original content
          cp "$file" "/tmp/diffs/$(basename $file).original"
          
          if python3 fix_python_errors.py "$file"; then
            # Generate diff if file was modified
            if ! cmp -s "$file" "/tmp/diffs/$(basename $file).original"; then
              FIXED_FILES+=("$file")
              
              # Generate detailed diff
              diff_output=$(diff -u "/tmp/diffs/$(basename $file).original" "$file" | tail -n +3)
              
              # Store diff details
              echo "### Changes in $file:" >> /tmp/diffs/changes.md
              echo '```diff' >> /tmp/diffs/changes.md
              echo "$diff_output" >> /tmp/diffs/changes.md
              echo '```' >> /tmp/diffs/changes.md
              echo "" >> /tmp/diffs/changes.md
            fi
          else
            echo "Error processing $file"
            exit 1
          fi
        done
        
        if [ ${#FIXED_FILES[@]} -gt 0 ]; then
          # Save the list of fixed files
          echo "fixed_files=${FIXED_FILES[*]}" >> $GITHUB_OUTPUT
          echo "has_fixes=true" >> $GITHUB_OUTPUT
          
          # Save the changes description to a file that can be read in the next step
          cat /tmp/diffs/changes.md > /tmp/diffs/pr_description.md
        else
          echo "has_fixes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Update Dev Branch
      if: steps.check_commit.outputs.skip != 'true' && steps.fix_errors.outputs.has_fixes == 'true'
      run: |
        # Configure git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # First, update dev branch with the fixes
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Create commit message with detailed changes
        COMMIT_MSG="Auto-fix: Python errors fixed [skip-build]\n\nFixed files:\n"
        for file in ${{ steps.fix_errors.outputs.fixed_files }}; do
          COMMIT_MSG+="- $file\n"
        done
        COMMIT_MSG+="\nDetailed changes:\n"
        COMMIT_MSG+="$(cat /tmp/diffs/pr_description.md)"
        
        # Make sure we're on dev branch
        git checkout dev
        git pull origin dev
        
        # Apply and commit changes
        git add .
        git commit -m "$COMMIT_MSG"
        git push origin dev
        
        # Store the commit SHA for PR creation
        echo "dev_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request
      if: steps.check_commit.outputs.skip != 'true' && steps.fix_errors.outputs.has_fixes == 'true'
      run: |
        # Create a new branch for the PR
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FIX_BRANCH="fix/python-errors-${TIMESTAMP}"
        
        # Create branch from the updated dev branch
        git checkout -b $FIX_BRANCH
        
        # Push the branch
        git push origin $FIX_BRANCH
        
        # Create PR description
        PR_DESCRIPTION="# Python Error Fixes\n\n"
        PR_DESCRIPTION+="Automated PR to fix Python errors using Claude 3.5\n\n"
        PR_DESCRIPTION+="## Summary of Changes\n\n"
        PR_DESCRIPTION+="The following files were fixed:\n"
        for file in ${{ steps.fix_errors.outputs.fixed_files }}; do
          PR_DESCRIPTION+="- \`$file\`\n"
        done
        PR_DESCRIPTION+="\n## Detailed Changes\n\n"
        PR_DESCRIPTION+="$(cat /tmp/diffs/pr_description.md)"
        PR_DESCRIPTION+="\n\nNote: These changes have been automatically committed to the dev branch as well."
        
        # Create PR
        gh pr create \
          --title "Fix Python Errors (${TIMESTAMP})" \
          --body "$PR_DESCRIPTION" \
          --base main \
          --head $FIX_BRANCH
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Report Status
      if: always()
      run: |
        if [[ "${{ steps.check_commit.outputs.skip }}" == "true" ]]; then
          echo "✅ Build skipped - Auto-fix commit detected"
        elif [[ "${{ steps.fix_errors.outputs.has_fixes }}" == "true" ]]; then
          echo "✅ Successfully fixed Python errors, updated dev branch, and created PR"
        elif [[ "${{ steps.fix_errors.result }}" == "success" ]]; then
          echo "✅ No Python errors found"
        else
          echo "❌ Error fixing Python files"
          exit 1
        fi